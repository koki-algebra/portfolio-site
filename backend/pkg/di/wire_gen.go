// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"backend/internal/application/usecase"
	"backend/internal/infrastructure/database"
	"backend/internal/infrastructure/repository"
	"backend/internal/presentation/interseptor"
	"backend/internal/presentation/service/userservice"
	"backend/pkg/grpc/gen/user/v1/userv1connect"
	"context"
	"database/sql"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitConnectService(ctx context.Context, db *sql.DB) (*ConnectServiceSet, error) {
	sqlxDB := database.NewSqlxDB(db)
	user := repository.NewUser(sqlxDB)
	usecaseUser := usecase.NewUser(user)
	userServiceHandler := userservice.New(usecaseUser)
	diConnectServiceSet := &ConnectServiceSet{
		UserServiceHandler: userServiceHandler,
	}
	return diConnectServiceSet, nil
}

func InitInterceptor(ctx context.Context, db *sql.DB) (*InterceptorSet, error) {
	sqlxDB := database.NewSqlxDB(db)
	user := repository.NewUser(sqlxDB)
	authInterceptor := interseptor.NewAuthInterceptor(user)
	diInterceptorSet := &InterceptorSet{
		AuthInterceptor: authInterceptor,
	}
	return diInterceptorSet, nil
}

// wire.go:

var infrastructureSet = wire.NewSet(database.NewSqlxDB)

var repositorySet = wire.NewSet(repository.NewUser)

var usecaseSet = wire.NewSet(usecase.NewUser)

var connectServiceSet = wire.NewSet(userservice.New)

var interceptorSet = wire.NewSet(interseptor.NewAuthInterceptor)

type UsecaseSet struct {
	User usecase.User
}

type ConnectServiceSet struct {
	UserServiceHandler userv1connect.UserServiceHandler
}

type InterceptorSet struct {
	AuthInterceptor *interseptor.AuthInterceptor
}
